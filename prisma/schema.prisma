// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("HANA_DATABASE_URL")
}

model Article {
  id          Int       @id @default(autoincrement())
  to          String    @unique
  title       String    @unique
  description String?
  cover       String?
  alt         String    @unique
  ogImage     String?
  publishedAt DateTime  @default(now())
  editedAt    DateTime  @updatedAt
  published   Boolean   @default(false)
  wordCount   Int       @default(0)
  tags        Tag[]     @relation("ArticleTags")
  category    Category? @relation(fields: [categoryId], references: [id])
  categoryId  Int?
  comments    Comment[]
}

model Tag {
  id           Int       @id @default(autoincrement())
  name         String    @unique
  articleCount Int       @default(0)
  articles     Article[] @relation("ArticleTags")
}

model Category {
  id           Int       @id @default(autoincrement())
  name         String    @unique
  cover        String?
  articleCount Int       @default(0)
  articles     Article[]
}

model User {
  id       Int       @id @default(autoincrement())
  email    String    @unique
  username String    @unique
  password String
  site     String?
  avatar   String?
  comments Comment[]
  replies  Comment[] @relation("ReplyToUser")
  messages Message[]
}

model Session {
  id        String   @id
  sid       String   @unique
  data      String
  expiresAt DateTime
}

model Comment {
  id               Int          @id @default(autoincrement())
  article          Article?     @relation(fields: [articleId], references: [id])
  articleId        Int?
  content          String
  level            CommentLevel @default(PARENT)
  parent           Comment?     @relation("ParentChild", fields: [parentId], references: [id], onDelete: Cascade)
  parentId         Int?
  children         Comment[]    @relation("ParentChild")
  author           User?        @relation(fields: [authorId], references: [id])
  authorId         Int?
  replyToUser      User?        @relation("ReplyToUser", fields: [replyToUserId], references: [id])
  replyToUserId    Int?
  replyToComment   Comment?     @relation("ReplyToComment", fields: [replyToCommentId], references: [id])
  replyToCommentId Int?
  replies          Comment[]    @relation("ReplyToComment")
  publishedAt      DateTime     @default(now())
  editedAt         DateTime     @updatedAt
}

model Message {
  id          Int       @id @default(autoincrement())
  content     String
  parentId    Int?
  parent      Message?  @relation("ParentChild", fields: [parentId], references: [id])
  children    Message[] @relation("ParentChild")
  author      User?     @relation(fields: [authorId], references: [id])
  authorId    Int?
  publishedAt DateTime  @default(now())
  editedAt    DateTime  @updatedAt
}

enum CommentLevel {
  PARENT
  CHILD
}
